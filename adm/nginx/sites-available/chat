server {
	server_name chat.$ALLEMANDE_DOMAIN chat-local.$ALLEMANDE_DOMAIN;

	charset utf-8;

	# SSL configuration

	listen 127.0.0.1:440 ssl http2 proxy_protocol;
#	listen [::1]:440 ssl http2 proxy_protocol;

	set_real_ip_from 127.0.0.1;
	real_ip_header proxy_protocol;

	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332

	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782

	ssl_certificate /etc/letsencrypt/live/$ALLEMANDE_DOMAIN/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/$ALLEMANDE_DOMAIN/privkey.pem;

	root /var/www/allychat/static/;
	index index.html;

	absolute_redirect off;

	auth_jwt_key "$ALLYCHAT_JWT_SECRET_BINHEX";
	auth_jwt_loginurl "https://$ALLEMANDE_DOMAIN/";
	auth_jwt_enabled off;
	auth_jwt_redirect on;
	auth_jwt_location COOKIE=auth;
	auth_jwt_algorithm HS256;

	# privacy
	access_log off;
	# error_log /dev/null;
	# access_log /var/log/nginx/cors-debug.log cors_debug;

	location /service_worker.js {
		add_header Cache-Control "no-cache";
		try_files /service_worker_gen.js =404;
	}

	location ~ /\. {
		deny all;
	}

	location ~ ^/icons.woff2\?.*$ {
		add_header Access-Control-Allow-Origin https://rooms.$ALLEMANDE_DOMAIN always;
		add_header Access-Control-Allow-Credentials true;

		try_files $uri $uri/ =404;
	}

	location /themes {
		# Allow client to list available themes
		autoindex on;

		if ($is_banned) {
			return 302 https://$ALLEMANDE_DOMAIN/ban.html;
		}
		auth_jwt_enabled on;

		# working CORS alternative #1:
		# Return the Access-Control-Allow-Origin header, even when requested by other domains.
		add_header Access-Control-Allow-Origin https://rooms.$ALLEMANDE_DOMAIN always;
		add_header Access-Control-Allow-Credentials true;

# 		# working CORS alternative #2:
#		# Due to a Chrome bug, we would need "no-cache" on shared resouces that return different Access-Control-Allow-Origin headers for different clients.
# 		add_header Cache-Control "no-cache";
# 		if ($cors_header = "https://rooms.$ALLEMANDE_DOMAIN") {
# 			add_header Access-Control-Allow-Origin $cors_header always;
# 			add_header Access-Control-Allow-Credentials true;
# #			add_header Cross-Origin-Resource-Policy cross-origin;
# 		}

		rewrite ^(.*)\.(\d+)\.(css|js|png|jpg|ttf)$ $1.$3 break;

		try_files $uri $uri/ =404;
	}

	location / {
		if ($is_banned) {
			return 302 https://$ALLEMANDE_DOMAIN/ban.html;
		}
		auth_jwt_enabled on;

		# working CORS alternative #1:
		add_header Access-Control-Allow-Origin https://rooms.$ALLEMANDE_DOMAIN always;
		add_header Access-Control-Allow-Credentials true;

# 		# working CORS alternative #2:
# 		add_header Cache-Control "no-cache";
# 		if ($cors_header = "https://rooms.$ALLEMANDE_DOMAIN") {
# 			add_header Access-Control-Allow-Origin $cors_header always;
# 			add_header Access-Control-Allow-Credentials true;
# #			add_header Cross-Origin-Resource-Policy cross-origin;
# 		}

		rewrite ^(.*)\.(\d+)\.(css|js|png|jpg|ttf)$ $1.$3 break;

		try_files $uri $uri/ =404;
	}

	location /x {
		auth_jwt_enabled on;
		auth_jwt_redirect off;
		add_header Cache-Control "no-cache";
		proxy_pass http://127.0.0.1:8000;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https;
		auth_jwt_extract_request_claims sub;
		proxy_set_header X-Forwarded-User $http_jwt_sub;
	}
}
