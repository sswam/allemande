#!/usr/bin/perl -n
# output bash code to handle AMPS named arguments
# For now, >>append is treated like regular output

use strict;
use warnings;

our ($count, @usage_args, @commands, @modes);

BEGIN {
	$count = 0;
}

# argument number and name
my $arg_num = $.;
chomp(my $arg_name = $_);
my $arg_abs;
my $arg_val;

# collect argument names
my $usage_arg = $arg_name;
$usage_arg =~ s/[<>]+$//;
push @usage_args, $arg_name;

my $mode;

# handle stdio
if ($arg_name =~ s/^<//) {
	$arg_val = "/dev/stdin";
	$arg_abs = $arg_val;
} elsif ($arg_name =~ s/^>+//) {
	$arg_val = "/dev/stdout";
	$arg_abs = $arg_val;
} else {
	$arg_val = "\${$arg_num}";
	++$count;
	if ($arg_name =~ s/<$//) {
		$mode = "I";
	} elsif ($arg_name =~ s/>$//) {
		$mode = "O";
	} else {
		$mode = "s";
	}
	if ($mode eq "I" || $mode eq "O") {
		$arg_abs = qq{\$(realpath -s "$arg_val")};
	} else {
		$arg_abs = undef;
	}
	push @modes, $mode;
}

my $command = "$arg_name=$arg_val";
if ($arg_abs) {
	$command .= qq{ && ln -s "$arg_abs" "\$__AMPS_work_dir/$arg_name"};
}
$command .= "\n";

# collect the commands
push @commands, $command;

# finally, code to check that the right number of arguments were provided, then output the commands
END {
	print <<End;
[ \$# = $count ] || { echo >&2 usage: "\$prog @usage_args"; exit 2; }
AMPS_argv "@modes" "\$@"
set -- "\${__AMPS_argv[@]}"
End
	print @commands;
}
