Prompt	Answer	Extra
Conventional Commits' purpose	Adding human and machine readable meaning to commit messages	Conventional Commits is a lightweight convention on top of commit messages that provides an easy set of rules for creating an explicit commit history. It makes it easier to write automated tools on top of the commit history and is compatible with SemVer.
Structure of a Conventional Commit message	<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]	Commit messages in Conventional Commits should be structured with a type (e.g. "feat" for a new feature), an optional scope (e.g. "(parser)" for a specific part of the codebase), a colon, a space, and a description. Optionally, a commit message may have a body providing additional contextual information and one or more footers for other relevant details.
Core types of Conventional Commits	fix, feat, BREAKING CHANGE	The core types in Conventional Commits are `fix` for bug fixes, `feat` for new features, and `BREAKING CHANGE` for breaking API changes. Additional types like `docs`, `refactor`, and `style` are allowed but not mandated by the specification.
Semantic Versioning correlation with Conventional Commits	fix => PATCH, feat => MINOR, BREAKING CHANGE => MAJOR	Conventional Commits dovetails with Semantic Versioning (SemVer) by relating `fix` commits to PATCH releases, `feat` commits to MINOR releases, and commits with `BREAKING CHANGE` to MAJOR releases.
Indicating breaking changes in Conventional Commits	appending ! after type/scope or using a BREAKING CHANGE footer	Breaking changes can be indicated in Conventional Commits by appending a ! after the type/scope (e.g., `feat!`), or by using a `BREAKING CHANGE:` footer in the commit message. This correlates to a major version bump in Semantic Versioning.
Usage of scope in Conventional Commits	A noun describing a section of the codebase surrounded by parenthesis	A scope may be provided after a type in a commit message, and should consist of a noun describing a section of the codebase, surrounded by parenthesis (e.g., `fix(parser):`). This provides additional contextual information about the part of the project that the commit affects.
Conventional Commits and revert commits	No explicit handling; recommended to use "revert" type and footer referencing commit SHAs	Conventional Commits does not explicitly define how to handle revert commits. It leaves the decision to tooling authors and the flexibility of types and footers. One recommendation is to use the "revert" type with a footer referencing the commit SHAs that are being reverted (e.g., `revert: description\n\nRefs: a123456, b789012`).
