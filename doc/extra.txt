#!/bin/bash -eu

# These install notes are for the developer's preferred setup.
# Most steps are not necessary to run allemande tools.

# ======== run some things as root {{{ =======================================

user=$USER
host=$HOSTNAME
server=ucm.dev
code=$server:/home/sam/code

read -p "Setting are user=$user, host=$host, server=$server, code=$code, okay? " yn
if [ "$yn" != y ]; then
	echo >&2 "Please fix your settings, then re-run $(basename $0)"
	exit 1
fi

# -------- set up sudo with staff group --------------------------------------

sudo sh -c "
cat <<END >/etc/sudoers.d/local
%staff ALL = (ALL) NOPASSWD: ALL
END

sudo adduser $USER staff
"

newgrp staff

# -------- setup apt sources.list --------------------------------------------

sudo sh -c "
cat <<END >/etc/apt/sources.list
deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
deb http://deb.debian.org/debian sid main contrib non-free non-free-firmware
deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
deb http://ftp.debian.org/debian bookworm-backports main contrib non-free non-free-firmware
deb http://ftp.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
deb http://ftp.debian.org/debian experimental main contrib non-free non-free-firmware
END
"

# -------- allow staff to install programs without sudo ----------------------

cd /usr/local
dirs="bin sbin man man/man1 lib/site_perl"
sudo mkdir -p $dirs
sudo chgrp staff $dirs
sudo chmod g+w $dirs

# -------- set user full name ------------------------------------------------

read -p "Your full name: " fullname
sudo chfn -f "$fullname" $USER

# -------- install essential tools -------------------------------------------

sudo apt update
sudo apt install ssh rsync screen build-essential devscripts python3-dev python3.10-dev vim

# -------- set up ssh --------------------------------------------------------

mkdir -p ~/.ssh
chmod go-rwx ~/.ssh
ssh-keygen -t rsa
ssh-copy-id $server
ssh -T -f -oServerAliveInterval=15 -oServerAliveCountMax=3 -N $server
ssh $server hostname
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

# -------- don't break Debian ------------------------------------------------

scp $server:/etc/apt/preferences.d/99dontbreakdebian ./
sudo mv -i 99dontbreakdebian /etc/apt/preferences.d/

# -------- make the code directory -------------------------------------------

cd ; mkdir -p code ; cd code

# -------- git ---------------------------------------------------------------

git config --global pull.rebase false
git config --global user.email $user@$server
git config --global user.name "$fullname"

# -------- arcs: a git wrapper for lazy hackers ------------------------------

git clone $code/arcs

cd arcs
make
make devinst

# -------- clone everything else with arcs -----------------------------------

cd ~/code
for repo in a2b ansible brace c cz edict f3db profile ucm-packages ucm-tools Xtools; do
	arcs -c $code/$repo
done

# -------- apt distribution upgrade, to bookworm (testing) -------------------

sudo apt update
sudo apt dist-upgrade

# -------- cz: a dialect of C that looks like Python -------------------------

cd ~/code/brace
sudo apt install libio-string-perl libx11-dev libxext-dev libpng-dev libsdl-mixer1.2-dev libgl1-mesa-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
./configure
make
sudo make install

cd ~/code/cz
make
sudo make devinst
sudo ldconfig

# -------- ucm-tools: a large collection of tools ----------------------------

cd ~/code/ucm-tools
./configure 
make devinst

# -------- user tmp dir ------------------------------------------------------

mkdir /tmp/sam
ln -s /tmp/sam ~/tmp

# -------- profile: portable conf files --------------------------------------

cp -aT ~/code/profile/sam ~/code/profile/$user || true
ln -s ~/code/profile/$user ~/conf
setup_conf

# -------- symlink /mnt/* to / -----------------------------------------------

sudo ln -s /mnt/* /

# -------- my: personal files ------------------------------------------------

ssh $server i my arcs -i
arcs -c $server:my

## -------- etc/private: private files ----------------------------------------
#
#ssh $server mkdir -p etc/private
#ssh $server i etc/private arcs -i
#. mdcd etc
#arcs -c $server:etc/private

# -------- conf files for the local machine ----------------------------------

. mdcd ~/my/$host
touch rc profile
if [ ! -e ucm-packages ]; then
cat <<END > ucm-package
ucm-core
ucm-common
ucm-dev
ucm-dev-core
ucm-amd64
ucm-desktop
END
fi

# -------- ucm-packages: necessary and useful packages -----------------------

cd ~/code/ucm-packages
make
sudo apt install ./python3.10-distutils-bogus_1.0_all.deb
sudo apt install python3.10-venv

# ./ucmpkg ucm-core ucm-common ucm-dev-core ucm-dev ucm-desktop

# -------- allemande: AI toolkit ---------------------------------------------

cd
git clone git@github.com:sswam/allemande
cd allemande
sudo apt install $(<debian-deps)
python3.10 -m venv venv
. venv/bin/activate

# cpu-only torch?
confirm pip install torch==1.8.1+cpu,torchvision==0.9.1+cpu -f https://download.pytorch.org/whl/torch_stable.html

# nvidia torch?
pip install torch

pip install -r requirements-appserver.txt 
pip install -r requirements.txt 

# ----------------------------------------------------------------------------

# TODO more on setting up Ally
