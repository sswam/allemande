#!/bin/bash
# llm-git-commit: git commit with a message generated by ChatGPT or Claude

model_code=""

usage() {
	echo "Usage: llm-git-commit [-3|-4|-c|-i] [-m message] [-e] [-h]"
	echo "  -3: generate with ChatGPT-3.5"
	echo "  -4: generate with GPT-4"
	echo "  -c: generate with Claude"
	echo "  -i: generate with Claude Instant"
	echo "  -m: use the given message instead of generating one"
	echo "  -e: normal git commit using the editor"
	echo "  -h: show this help message"
}

while getopts "34cim:eh" opt; do
	case "$opt" in
	3 ) model="3+";;
	4 ) model="4";;
	c ) model="c";;
	i ) model="i";;
	e ) exec git commit ;;
	m ) exec git commit -m "$OPTARG" ;;
	h ) usage; exit 0;;
	* ) usage; exit 1;;
	esac
done
shift $((OPTIND-1))

timestamp=`date +%Y%m%d%H%M%S`
file="commit-message.$timestamp.txt"
review="review.$timestamp.txt"

model-name() {
	model="$1"
	case "$model" in
	3+ ) echo "ChatGPT-3.5";;
	4 ) echo "GPT-4";;
	c ) echo "Claude";;
	i ) echo "Claude Instant";;
	esac
}

generate-commit-message() {
	model="$1"
	echo "Generating commit message using `model-name $model` ..."
	git diff --staged |
		llm process -m $model 'Please describe this diff, for a git commit message, following the Conventional Commits spec.
The required format is as follows:
a very short summary line, preferably around 50 chars, and strictly not more than 70 chars
Do not invent anything that is not in the diff!
Only describe the actual changes, lines starting with + and -, not the surrounding context.

- concise info about first change, if needed, not more than 78 chars per line
- concise info about second change, if any, not more than 78 chars per line
- and so on
' |
	fmt -s -w 78 -g 78 > "$file"
}

check-for-bugs() {
	model="$1"
	echo "Checking for bugs using `model-name $model` ..."
	git diff --staged |
		llm process -m $model 'Please do a code review: check this diff carefully for bugs, and tell me in brief about any bugs or other issues.' |
	fmt -s -w 78 -g 78 | tee "$review"
}

if [ -n "$model" ]; then
	generate-commit-message "$model"
fi

cleanup-and-exit() {
	if type move-rubbish >/dev/null 2>&1; then
		move-rubbish "$file" "$review" 2>/dev/null
	else
		rm -f "$file" "$review"
	fi
	exit "$1"
}

while true; do
	if [ -e "$file" ]; then
		cat "$file"
		echo
		prompt="Commit with this message?"
	else
		prompt="Action?"
	fi
	read -p "$prompt [y/n/e/3/4/c/i/d/v/b/?] " -n 1 -r choice 2>&1
	echo
	case "$choice" in
		y|Y ) break;;
		n|N|q|Q )
			cleanup-and-exit 1
			;;
		e|E )
			${EDITOR:-vi} "$file"
			;;
		3 )
			generate-commit-message 3+
			;;
		4 )
			generate-commit-message 4
			;;
		c )
			generate-commit-message c
			;;
		i )
			generate-commit-message i
			;;
		d|D )
			git diff --staged
			;;
		v|V )
			git-vimdiff-staged
			;;
		b|B )
			check-for-bugs 4
			;;
		\?|h )
			echo "y: commit with this message"
			echo "n: abort"
			echo "e: edit the message"
			echo "3: generate with ChatGPT-3.5"
			echo "4: generate with GPT-4"
			echo "c: generate with Claude"
			echo "i: generate with Cluade Instant"
			echo "d: diff the staged changes"
			echo "v: vimdiff the staged changes"
			echo "b: check for bugs with GPT-4"
			echo "?: show this help message"
			echo
			;;
		* )
			echo "Invalid choice"
			;;
	esac
done

git commit -F "$file"
cleanup-and-exit "$?"
