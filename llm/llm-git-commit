#!/bin/bash
# llm-git-commit: git commit with a message generated by ChatGPT or Claude

model_code=""

usage() {
	echo "Usage: llm-git-commit [-4|-n|-3|-c|-i] [-m message] [-e] [-h]"
	echo "  -4: generate with GPT-4 (default)"
	echo "  -n: start at menu, do not generate"
	echo "  -3: generate with ChatGPT-3.5"
	echo "  -c: generate with Claude"
	echo "  -C: generate with Claude 100k"
	echo "  -i: generate with Claude Instant"
	echo "  -I: generate with Claude Instant 100k"
	echo "  -m: use the given message instead of generating one"
	echo "  -e: normal git commit using the editor"
	echo "  -h: show this help message"
}

model="4"

while getopts "4n3cCiIm:eh" opt; do
	case "$opt" in
	4 ) model="4";;
	n ) model="";;
	3 ) model="3+";;
	c ) model="c";;
	C ) model="c+";;
	i ) model="i";;
	I ) model="i+";;
	m ) exec git commit -m "$OPTARG" ;;
	e ) exec git commit ;;
	h ) usage; exit 0;;
	* ) usage; exit 1;;
	esac
done
shift $((OPTIND-1))

# add entries under directories
files=()
for ent; do
	if [ -d "$ent" -a \! -L "$ent" ]; then
		IFS_old=$IFS
		IFS=$'\n'; files+=( $( find "$ent" \! -type d ) )
		IFS=$IFS_old
	else
		files+=( "$ent" )
	fi
done

# chdir to somewhere in the repo, from files[0]
if [ -n "${files[0]}" ]; then
	cd "$(dirname "${files[0]}")"
	cd "$(git rev-parse --show-toplevel)"
fi

# check if already staged; in which case, unstage, it works better that way
for file in "${files[@]}"; do
	if ! git diff --staged --quiet "${files[@]}"; then
		v git restore --staged "${files[@]}"
	fi
done

cleanup() {
	# remove empty commit messages, that are not open
	f -type f -name 'commit-message.*.txt' -size 0 -- |
	while read -r file; do
		if ! lsof "$file" >/dev/null 2>&1; then
			rm -v "$file"
		fi
	done
}

trap 'cleanup; exit' EXIT
trap 'cleanup; exit 1' INT

timestamp=`date +%Y%m%d%H%M%S`
commit_message="commit-message.$timestamp.txt"
review="review.$timestamp.txt"

model-name() {
	model="$1"
	case "$model" in
	3+ ) echo "ChatGPT-3.5";;
	4 ) echo "GPT-4";;
	c ) echo "Claude";;
	c+ ) echo "Claude 100k";;
	i ) echo "Claude Instant";;
	i+ ) echo "Claude Instant 100k";;
	esac
}

run-git-diff() {
	local difftext
	if [ "${#files[@]}" -eq 0 ]; then
		git diff --staged
	else
		difftext=`git diff -- "${files[@]}"`
		if [ -n "$difftext" ]; then
			printf "%s\n" "$difftext"
		elif [ -z "$difftext" ]; then
			for file in "${files[@]}"; do
				if [ -e "$file" ] && [ -n "$(git ls-files --exclude-standard --others --directory --no-empty-directory --error-unmatch "$file" 2>/dev/null)" ]; then
					cat-sections.py -k "$file"
				fi
			done
		fi
	fi
}

generate-commit-message() {
	model="$1"
	echo "Generating commit message using `model-name $model` ..."
	if [ -e "$commit_message" ]; then
		echo >&2 "Commit message already exists: $commit_message, moving it to rubbish."
		mr "$commit_message"
	fi
	run-git-diff |
		llm process -m $model 'Please describe this diff, for a git commit message, following the Conventional Commits spec.
Do not invent anything that is not in the diff!
Only describe the actual changes, lines starting with + and -, not the surrounding context.
The required format is as follows:

feat|fix(short-module-name): a short summary line, preferably around 50 chars, not more than 70 chars

- concise info about first change, if needed. DO NOT WRAP THE LINES
- concise info about second change, if any. DO NOT WRAP THE LINES
- and so on ...

There can be only one feat or fix line per commit, then a blank line, then there can be multiple list items starting with -, DO NOT WRAP THE LINES.
The (short-module-name) part is optional. Commit type can be feat|fix|chore etc.
Do not belabour the obvious; we do not need too much detail, e.g. moving folders do not list every file that was moved.
' |
	fmt -s -w 78 -g 78 > "$commit_message"
}

check-for-bugs() {
	model="$1"
	echo "Checking for bugs using `model-name $model` ..."
	if [ -e "$review" ]; then
		echo >&2 "Code review already exists: $review, moving it to rubbish."
		mr "$review"
	fi
	run-git-diff |
		llm process -m $model 'Please do a code review: check this diff carefully for bugs, and tell me in brief about any bugs, other issues, or suggestions to improve it.' |
		fmt -s -w 78 -g 78 |
		tee "$review"
}

if [ -n "$model" ]; then
	generate-commit-message "$model"
fi

cleanup-and-exit() {
	if type move-rubbish >/dev/null 2>&1; then
		move-rubbish "$commit_message" "$review" 2>/dev/null
	else
		rm -f "$commit_message" "$review"
	fi
	exit "$1"
}

run-git-vimdiff() {
	if [ "${#files[@]}" -eq 0 ]; then
		git-vimdiff-staged
	else
		git-vimdiff "${files[@]}"
	fi
}

while true; do
	if [ -e "$commit_message" ]; then
		cat "$commit_message"
		echo
		prompt="Commit with this message?"
	else
		prompt="Action?"
	fi
	read -p "$prompt [y/n/e/3/4/c/C/i/I/d/v/b/?] " -n 1 -r choice 2>&1
	echo
	case "$choice" in
		y|Y) break;;
		n|N|q|Q)
			cleanup-and-exit 1
			;;
		e|E)
			${EDITOR:-vi} "$commit_message"
			;;
		3)
			generate-commit-message 3+
			;;
		4)
			generate-commit-message 4
			;;
		c)
			generate-commit-message c
			;;
		C)
			generate-commit-message c+
			;;
		i)
			generate-commit-message i
			;;
		I)
			generate-commit-message i
			;;
		d|D)
			run-git-diff
			;;
		v|V)
			run-git-vimdiff
			;;
		b|B)
			check-for-bugs 4
			;;
		\?|h)
			echo "y: commit with this message"
			echo "n: abort"
			echo "e: edit the message"
			echo "3: generate with ChatGPT-3.5"
			echo "4: generate with GPT-4"
			echo "c: generate with Claude"
			echo "C: generate with Claude 100k"
			echo "i: generate with Cluade Instant"
			echo "d: diff the staged changes"
			echo "v: vimdiff the staged changes"
			echo "b: check for bugs with GPT-4"
			echo "?: show this help message"
			echo
			;;
		*)
			echo "Invalid choice"
			;;
	esac
done

if [ "${#files[@]}" -gt 0 ]; then
	git add -- "${files[@]}"
fi

git commit -F "$commit_message"

cleanup-and-exit "$?"
