magic_methods = [
    "__init__",
    "__new__",
    "__del__",
    "__eq__",
    "__ne__",
    "__lt__",
    "__rt__",
    "__le__",
    "__ge__",
    "__hash__",
    "__repr__",
    "__str__",
    "__bool__",
    "__int__",
    "__float__",
    "__bytes__",
    "__complex__",
    "__format__",
    "__enter__",
    "__exit__",
    "__len__",
    "__iter__",
    "__getitem__",
    "__setitem__",
    "__delitem__",
    "__contains__",
    "__reversed__",
    "__next__",
    "__missing__",
    "__length_hint__",
    "__add__",
    "__radd__",
    "__sub__",
    "__rsub__",
    "__mul__",
    "__rmul__",
    "__truediv__",
    "__rtruediv__",
    "__mod__",
    "__rmod__",
    "__floordiv__",
    "__rfloordiv__",
    "__pow__",
    "__rpow__",
    "__matmul__",
    "__rmatmul__",
    "__and__",
    "__rand__",
    "__or__",
    "__ror__",
    "__xor__",
    "__rxor__",
    "__rshift__",
    "__rrshift__",
    "__lshift__",
    "__rlshift__",
    "__neg__",
    "__pos__",
    "__invert__",
    "__divmod__",
    "__abs__",
    "__index__",
    "__round__",
    "__trunc__",
    "__floor__",
    "__ceil__",
    "__iadd__",
    "__isub__",
    "__imul__",
    "__itruediv__",
    "__imod__",
    "__ifloordiv__",
    "__ipow__",
    "__imatmul__",
    "__iand__",
    "__ior__",
    "__ixor__",
    "__irshift__",
    "__ilshift__",
    "__getattribute__",
    "__getattr__",
    "__setattr__",
    "__delattr__",
    "__dir__",
    "__set_name__",
    "__get__",
    "__set__",
    "__delete__",
    "__init_subclass__",
    "__mro_entries__",
    "__class_getitem__",
    "__prepare__",
    "__instancecheck__",
    "__subclasscheck__",
    "__await__",
    "__aenter__",
    "__aexit__",
    "__aiter__",
    "__anext__",
    "__buffer__",
    "__release_buffer__"
    "__call__",
]




# for method in magic_methods:
#     if method in ["__init__", "__new__", "__del__", "__getattribute__", "__getattr__", "__setattr__", "__delattr__", "__dir__", "__repr__"]:
#         continue
#     def proxy_method(method):
#         def proxy(self, *args, **kwargs):
#             print(f"Calling {method} with {args} and {kwargs}", file=sys.stderr)
#             target = self._LazyProxy_load()
#             return getattr(target, method)(*args, **kwargs)
#         return proxy
#     setattr(LazyProxy, method, proxy_method(method))
