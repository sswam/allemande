# opts: a simple option parser for bash
# no dependencies, no magic, no bullshit

usage() {
	# read the script itself to output usage:

	case "$*" in
	-h|-help|--help)
		# if -h was passed, not an error: output usage to stdout
		exit=0
		;;
	*)
		# error: if a message was passed, output it to stderr
		exit=1
		exec >&2
		if [ -n "$*" ]; then
			echo "$*"
			echo
		fi
		;;
	esac

	# use perl to parse the script itself and write help / usage to stdout
	< "$0" perl -pe "$(cat <<'EOF'
		$_ = "" if m{^#!/};	# Clear line if it is a shebang (script interpreter directive)
		$_ = "", $after=1, next if /^\. opts$/;	# Clear line and set flag if it is the `. opts` directive
		last if $after && /^$/;	# Stop processing if an empty line is encountered after the flag is set
		s/opt_([^a-zA-Z])/$1/;	# Remove `opt_` prefix from option names that are not valid bash variable names
		s/(.*?)=/-$1\t/ unless /^#/;	# Replace the first `=` with a tab, unless the line starts with `#`
		s/(^|\t)#\s*/$1/;	# Remove `#` and any following whitespace, if it is preceded by the beginning of the line or a tab
EOF
	)" | kut 1 3 2 4 5 6 | tsv2txt	# Reorder columns and convert tab-separated values to text

	exit $exit
}

OPTS_UNKNOWN=()
OPTS=()
OPTS_N=0

opts_set_scalar() {
	local type=$1 OPT=$2 VAL=$3

	# check that $OPT is declared as a string or an int
	if [ "$type" != "string" ] && [ "$type" != "int" ]; then
		usage "error: not a string or an int: $OPT"
	fi

	# check int
	if [ "$type" = "int" ] && ! [[ $VAL =~ ^[0-9]+$ ]]; then
		usage "error: not an int: $OPT=$VAL"
	fi

	eval $OPT=\$VAL
}

opts_set_array() {
	local type=$1 OPT=$2 VAL=$3

	# check that $OPT is declared as an array
	if [ "$type" != "array" ]; then
		usage "error: not an array: $OPT"
	fi

	# if OPTVAL is foo,a,b,c
	# then set OPT as an array to (a b c)
	
	local IFS_OLD=$IFS
	eval IFS=, $OPT=\(\$VAL\)
	IFS=$IFS_OLD
}

opts_set_assoc() {
	# TODO this doesn't work yet
	local type=$1 OPT=$2 VAL=$3
	
	# check that $OPT is declared as an assoc
	if [ "$type" != "assoc" ]; then
		usage "error: not an associative array: $OPT"
	fi

	local IFS_OLD=$IFS
	eval IFS=, $OPT=\(\$VAL\)
	IFS=$IFS_OLD
}

while true; do
	case "${1:-}" in
	"")
		break
		;;
	-|--)
		shift
		break
		;;
	-h|-help|--help)
		usage -h
		;;
	[!-]*)
		break
		;;
	esac

	OPTS[$OPTS_N]="$1"
	OPTVAL="${1#-}"
	OPTVAL="${OPTVAL#-}"

	OPT=${OPTVAL%%[=,\[]*}
	OPT="${OPT//-/_}"
	# if $OPT doesn't start with a letter, add opt_ prefix
	if ! [[ $OPT =~ ^[a-zA-Z] ]]; then
		OPT="opt_$OPT"
	fi

	OPTS_DECLARATION=`declare -p "$OPT" 2>/dev/null || true`

	case "$OPTS_DECLARATION" in
	declare\ -a*)
		type=array
		;;
	declare\ -A*)
		type=assoc
		;;
	declare\ -i*)
		type=int
		;;
	*)
		type=string
		;;
	esac

	# check if there's a function named $OPT, use declare -F
	function=0
	if declare -F "$OPT" >/dev/null 2>&1; then
		function=1
	fi

	# q. are there any other types as opposed to attributes?
	# a. yes, there are: -r, -x, -t, -n, -p, -f, -F, -C, -S, -T, -u, -r, -x, -t, -n, -p, -f, -F, -C, -S, -T, -u
	#   but they are not relevant to opts
	#

	if [ -z "$type" ]; then
		OPTS_UNKNOWN+=("$OPT")
	fi

	case "$OPTVAL" in
	*=*)
		VAL=${OPTVAL#*=}
		opts_set_scalar "$type" "$OPT" "$VAL"
		;;
	*,*)
		VAL=${OPTVAL#*,}
		opts_set_array "$type" "$OPT" "$VAL"
		;;
	*\[*\])
		VAL=${OPTVAL#*\[}
		VAL=${VAL%]}
		opts_set_assoc "$type" "$OPT" "$VAL"
		;;
	*:*)
		VAR=${OPTVAL%:*}
		opts_set_func "$function" "$OPT" "$VAR"
		;;
	*)
		opts_set_scalar "$type" "$OPT" 1
		eval $OPT=1
		;;
	esac
	shift
	OPTS_N=$[$OPTS_N + 1]
done

if [ ${#OPTS_UNKNOWN[@]} -gt 0 ]; then
	usage "error: unknown options: ${OPTS_UNKNOWN[*]}"
fi


# # usage from bash
# # e.g. for a -debug switch and -mode=foo option:
#
# #!/bin/bash
# debug=
# mode=normal
# . opts
# if (( debug )); then echo "debug mode"; fi
# echo "mode=$mode"
# echo opts: "${OPTS[@]}"
# echo args: "$@"

# There are four syntaxes for options:
# -foo		set $foo to 1
# -foo=bar	set $foo to bar
# -foo,a,b,c	set $foo to (a b c)
# -foo[a=b,c=d]	set $foo to (a=b c=d)
